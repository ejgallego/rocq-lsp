## Welcome to Coq LSP

- You can edit this document as you please
- Coq will recognize the code snippets as Coq
- You will be able to save the document and link to other documents soon

```coq
From Stdlib Require Import List.
Import ListNotations.
```

### Here is a simple Proof about Lists
$$
  \forall~x~l,
    \mathsf{rev}(l \mathrel{++} [x]) = x \mathrel{::} (\mathsf{rev}~l)
$$
```coq
Lemma rev_snoc_cons A :
  forall (x : A) (l : list A), rev (l ++ [x]) = x :: rev l.
Proof.
  induction l.
  - reflexivity.
  - simpl. rewrite IHl. simpl. reflexivity.
Qed.
```

### Here is another proof depending on it
Try to update _above_ and **below**:
```coq
Theorem rev_rev A : forall (l : list A), rev (rev l) = l.
Proof.
  induction l.
  - reflexivity.
  - simpl. rewrite rev_snoc_cons. rewrite IHl.
    reflexivity.
Qed.
```

Please edit your code here!

## Here we do some lambda terms, because we can!

```coq
Inductive term :=
  | Var : nat -> term
  | Abs : term -> term
  | Lam : term -> term -> term.
```
